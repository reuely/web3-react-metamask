{"version":3,"sources":["assets/kbean-logo.png","web3.js","utils/interact.js","App.js","utils/mobile-button.js","reportWebVitals.js","index.js"],"names":["web3","Web3","window","ethereum","connectWallet","request","method","addressArray","obj","status","address","message","target","rel","href","getCurrentWalletConnected","length","App","useState","walletAddress","setWallet","setStatus","userBalance","setBalance","connectMessage","useEffect","updateWallet","connectWalletPressed","alert","walletResponse","readWalletInfo","eth","getBalance","walletBalance","utils","fromWei","className","type","onClick","ua","navigator","userAgent","test","deviceType","location","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1587124c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/kbean-logo.8a6d08e7.png\";","import Web3 from \"web3\";\n\nconst web3 = new Web3(window.ethereum);\n\nexport default web3;","//got from alchemy website: \n//https://docs.alchemy.com/alchemy/tutorials/nft-minter\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"üëÜüèΩ Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"üò• \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              ü¶ä{\" \"}\n              {/* debug tip I added rel='noreferrer' to fix a warning */}\n              <a target=\"_blank\" rel='noreferrer' href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n\n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"üëÜüèΩ Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"ü¶ä Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"üò• \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              ü¶ä{\" \"}\n              {/* debug tip I added rel='noreferrer' to fix a warning */}\n              <a target=\"_blank\" rel='noreferrer' href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };","import React from 'react';\n//bootstraps\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n//css styling\nimport './App.css';\n//kbean logo\nimport logo from './assets/kbean-logo.png';\n//useEffect and useState methods from react\nimport { useEffect, useState } from \"react\";\nimport web3 from \"./web3\";\nimport { connectWallet, getCurrentWalletConnected } from \"./utils/interact.js\";\nimport { deviceType, getMobileOperatingSystem } from \"./utils/mobile-button.js\";\n\n\nfunction App() {\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [userBalance, setBalance] = useState(\"\");\n  const [connectMessage, setMessage] = \n    useState(\"If there is no Metamask pop-up for 15 seconds after clicking the button, click the metamask extension and make sure you're signed in!\");\n  // const [name, setName] = useState(\"\"); <-for future uses (maybe)\n  // const [signer, setSigner] = useState(\"\"); <-for future uses (maybe)\n\n  //Keeps the Connect button say \"Connected!\" if the user reloads\n  //the page after connecting their wallet.\n  useEffect(() => {\n    async function updateWallet() {\n      const {address, status} = await getCurrentWalletConnected();\n      setWallet(address);\n      setStatus(status); \n    }\n    updateWallet()\n  }, []);\n\n  //Prompts the users to connect Metamask to the website\n  const connectWalletPressed = async () => {\n    if (!window.ethereum) {\n      alert('Install Metamask extension first!');\n    } else {\n        const walletResponse = await connectWallet();\n        setStatus(walletResponse.status);\n        setWallet(walletResponse.address);\n      }\n  };\n\n  //Displays users' ETH amount on screen\n  //(Doesn't account for other coins other than ETH)\n  const readWalletInfo = async() => {\n    if (!(walletAddress.length > 0)) {\n      alert('Connect to your Metamask Wallet first!');\n    } else {\n      const walletBalance = await web3.eth.getBalance(walletAddress);\n      setBalance(web3.utils.fromWei(walletBalance, \"ether\") + \" ETH\");\n    }\n  };\n\n  //Connects to deeplink Metamask mobile app\n  function mobilePressed() {\n    if (deviceType() == 'desktop') {\n      alert('This button is for mobile uses only!');\n    } else {\n      if (window.ethereum) { //when users are trying to click this button when they're already inside MM app\n        alert('Use \"Connect Wallet\" button instead! If the button says \"Connected to Metamask!\", then you are already connected!');\n      } else {\n        const url = \"dapp://reuely.github.io/web3-react-metamask/\";\n        if (1 === 2) { //NEED DIFFERENT CHECKER\n          if (getMobileOperatingSystem() == 'Android') {\n            window.location.href = 'https://metamask.app.link/bxwkE8oF99';\n          } else if (getMobileOperatingSystem() == 'iOS') {\n            window.location.href = 'https://metamask.app.link/skAH3BaF99';\n          } else {\n            alert('Sorry, Metamask is only supported on Android and iOS.');\n          }\n        } else {\n          window.location.href = url;\n        }\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <div className='head-section'>\n        <h2>Web3 Project!</h2>\n      </div>\n      <header className=\"App-header\">\n        <div className='row'>\n          <div className='col-lg-6'>\n            <button type='button' className='btn btn-lg btn-outline-light' onClick={connectWalletPressed}>\n              {walletAddress.length > 0 ? (\n                \"Connected to Metamask!\"\n                ) : (\n                <span>Connect Wallet</span>\n              )}\n            </button>\n            <p className=\"wallet-message\">\n              {walletAddress.length > 0 ? (\n                \"\"\n                ) : (\n                <span>{connectMessage}</span>\n              )}\n            </p>\n          </div>\n          <div className='col-lg-6'>\n            <button type='button' className='btn btn-lg btn-outline-light' onClick={readWalletInfo}>\n              Read\n            </button>\n            <p>{userBalance}</p>\n          </div>\n          <div className='col-lg-6'>\n            <button type='button' className='btn btn-lg btn-outline-light' onClick={mobilePressed}>\n              Connect with mobile Metamask app\n            </button>\n          </div>\n        </div>\n      <p>\n      </p>\n      </header>\n      <div className='logo-section'>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    </div>\n  );\n}\n\n//index.js imports App\nexport default App;\n","\n//Checks what device user is on\n//source: https://attacomsian.com/blog/javascript-detect-mobile-device\nexport const deviceType = () => {\n    const ua = navigator.userAgent;\n    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {\n        return \"tablet\";\n    }\n    else if (/Mobile|Android|iP(hone|od)|IEMobile|BlackBerry|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {\n        return \"mobile\";\n    }\n    return \"desktop\";\n};\n\n// source code: https://stackoverflow.com/questions/21741841/detecting-ios-android-operating-system\n//Checks which mobile device user is using\nexport function getMobileOperatingSystem() {\n  var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n  // Windows Phone must come first because its UA also contains \"Android\"\n  if (/windows phone/i.test(userAgent)) {\n      return \"Windows Phone\";\n  }\n  if (/android/i.test(userAgent)) {\n      return \"Android\";\n  }\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n      return \"iOS\";\n  }\n  return \"unknown\";\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}